name: 'Pipeline-React-Main'
on:
  push:
    branches:
      - Develop
  workflow_dispatch:
permissions:
  id-token: write
  contents: read
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Build Next.js App
        run: npm run build
      
      - name: Prepare Deployment Package
        run: |
          mkdir -p deployment
          
          # Check if standalone mode is enabled
          if [ -d ".next/standalone" ]; then
            echo "Using standalone mode deployment"
            # Copy all standalone files
            cp -r .next/standalone/* deployment/
            # Create .next directory and copy static files
            mkdir -p deployment/.next
            if [ -d ".next/static" ]; then
              cp -r .next/static deployment/.next/static
            fi
            # Copy public directory if it exists and wasn't copied by standalone
            if [ -d "public" ] && [ ! -d "deployment/public" ]; then
              cp -r public deployment/public
            fi
          else
            echo "Using regular deployment (standalone not configured)"
            # Fallback for non-standalone builds
            cp -r .next deployment/.next
            cp -r public deployment/public 2>/dev/null || true
            cp package*.json deployment/
            # Install production dependencies
            cd deployment && npm ci --only=production
            cd ..
          fi
          
          # Debug: Show deployment structure
          echo "=== Deployment structure ==="
          find deployment -type f -name "*.js" | head -10
          echo "=== Package.json content ==="
          if [ -f "deployment/package.json" ]; then
            cat deployment/package.json
          fi
          echo "=== Server files ==="
          ls -la deployment/ | grep -E "(server|start)"
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
      
      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "WebAppTest-AS"
          slot-name: Production
          package: ./deployment
